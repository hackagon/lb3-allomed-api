Product.afterRemote("findById", async ctx => {
  const instance__product = ctx.result;


  await Promise.all(
    activeIngredients = instance__product.activeIngredients.find(),
    route = instance__product.route.get(),
    categoryTrade = instance__product.categoryTrade.get(),
    color = instance__product.color.get(),
    characteristic = instance__product.characteristic.get(),
    package = instance__product.package.get(),
    // coutry
    distributionCountry = instance__product.distributionCountry.get(),
    manufacturingCountry = instance__product.manufacturingCountry.get(),

    // enterprise
    distributionEnterprise = instance__product.distributionEnterprise.get(),
    manufacturingEnterprise = instance__product.manufacturingEnterprise.get(),
    labelEnterprise = instance__product.labelEnterprise.get(),

    pharmacologicalMechanism = instance__product.pharmacologicalMechanism.get(),
    pharmacologicalImpact = instance__product.pharmacologicalImpact.get(),
    unit = instance__product.unit.get(),
    toxicity = instance__product.toxicity.get(),
    productGroup = instance__product.productGroup.get(),
    ordor = instance__product.ordor.get(),
    shape = instance__product.shape.get(),
    otherCharacteristic = instance__product.otherCharacteristic.get(),
    categoryLabel = instance__product.categoryLabel.get(),
    use = instance__product.use.get(),
    chemicalStructure = instance__product.chemicalStructure.get(),
    fdaPharmacologicalGroup = instance__product.fdaPharmacologicalGroup.get(),
    snomedCategory = instance__product.snomedCategory.get(),
  )
    .then(res => {
      const activeIngredientNames = res[0].map(item => item.activeIngredientName).join(", ")
      const routeName = res[1] && res[1].__data.routeName;
      const categoryTrade = res[2] && res[2].__data.categoryTradeName;
      const color = res[3] && res[3].__data.colorName;
      const characteristic = res[4] && res[4].__data.characteristicName;
      const package = res[5] && res[5].__data.packageName;
      const distributionCountry = res[6] && res[6].__data.distributionCountryName;
      const manufacturingCountry = res[7] && res[7].__data.manufacturingCountryName;
      const labelEnterprise = res[8] && res[8].__data.labelEnterpriseName;
      const pharmacologicalMechanism = res[9] && res[9].__data.pharmacologicalMechanismName;
      const pharmacologicalImpact = res[10] && res[10].__data.pharmacologicalImpactName;
      const unit = res[11] && res[11].__data.unitName;
      const toxicity = res[12] && res[12].__data.toxicityName;
      const productGroup = res[13] && res[13].__data.productGroupName;
      const ordor = res[14] && res[14].__data.ordorName;
      const shape = res[15] && res[15].__data.shapeName;
      const otherCharacteristic = res[16] && res[16].__data.otherCharacteristicName;
      const categoryLabel = res[17] && res[17].__data.categoryLabelName;
      const use = res[18] && res[18].__data.useName;
      const chemicalStructure = res[19] && res[19].__data.chemicalStructureName;
      const fdaPharmacologicalGroup = res[20] && res[20].__data.fdaPharmacologicalGroupName;
      const snomedCategory = res[21] && res[21].__data.snomedCategoryName;

      ctx.result = {
        ...instance__product.__data,
        activeIngredientNames,
        routeName,
        categoryTrade,
        color, characteristic, package,
        distributionCountry, manufacturingCountry,
        labelEnterprise,
      }
    })
});